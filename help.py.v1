
import pandas as pd
import dash
import dash_core_components as dcc
import dash_html_components as html
from dash.dependencies import Input, Output, State
from flask_login import LoginManager, UserMixin, login_required, login_user, logout_user

# Define the app
app = dash.Dash(__name__)
app.secret_key = 'Str..Biol'
app.title = 'Login-Protected Plotting App'

# Read the data from a CSV file
df = pd.read_csv('data1.csv')

# Define the user model
class User(UserMixin):
    def __init__(self, username, password):
        self.id = username
        self.password = password

# Define the login manager
login_manager = LoginManager()
login_manager.init_app(app.server)

# Define the login callback
@app.callback(Output('login-result', 'children'),
              [Input('submit-button', 'n_clicks')],
              [State('username-input', 'value'), State('password-input', 'value')])
def login_user_callback(n_clicks, username, password):
    user = User(username, password)
    if username == 'user' and password == 'password':
        login_user(user)
        return 'Logged in successfully'
    else:
        return 'Invalid credentials'

# Define the logout callback
@app.callback(Output('logout-result', 'children'),
              [Input('logout-button', 'n_clicks')])
@login_required
def logout_user_callback(n_clicks):
    logout_user()
    return 'Logged out successfully'

# Define the app layout
app.layout = html.Div([
    # Login form
    html.Div([
        html.Label('Username'),
        dcc.Input(id='username-input', type='text'),
        html.Label('Password'),
        dcc.Input(id='password-input', type='password'),
        html.Button('Submit', id='submit-button'),
        html.Div(id='login-result')
    ]),
    # Logout button
    html.Div([
        html.Button('Logout', id='logout-button'),
        html.Div(id='logout-result')
    ], style={'display': 'none'}), # hide the logout button initially
    # Plot
    html.Div([
        dcc.Graph(id='graph')
    ], style={'display': 'none'}) # hide the plot initially
])

# Define the plot update function
def update_plot(n):
    return {
        'data': [{
            'x': df['x'],
            'y': df['y'],
            'type': 'scatter',
            'mode': 'lines+markers'
        }],
        'layout': {
            'title': f'Plot {n}',
            'xaxis': {'title': 'X'},
            'yaxis': {'title': 'Y'}
        }
    }

# Define the plot update callback
@app.callback(Output('graph', 'figure'),
              [Input('url', 'pathname')])
@login_required
def display_plot(pathname):
    # Extract the plot number from the pathname
    n = int(pathname.strip('/').split('/')[-1])
    return update_plot(n)

# Define the page navigation callback
@app.callback(Output('url', 'pathname'),
              [Input('graph', 'clickData')])
@login_required
def navigate_to_page(clickData):
    # Extract the clicked point index
    if clickData:
        point_index = clickData['points'][0]['pointIndex']
    else:
        point_index = 0
    # Navigate to the corresponding page
    return f'/plot/{point_index+1}'



if __name__ == '__main__':
	app.run(host="0.0.0.0", port="8090")

